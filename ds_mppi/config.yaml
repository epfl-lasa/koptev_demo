collision_model:
  fname: "franka_collision_model.pt"
  closest_spheres: 5
  obstacle: "wall"

general:
  # Initial state
  ## for left-right reaching
  # easy
  #q_0: [-1.2, -0.08, 0, -2., -0.16,  1.6, -0.75]
  #q_f: [1.2, -0.08, 0, -2., -0.16,  1.6, -0.75]
  #hard
  #q_0: [-1.2, 1, 1.12, -1.35, 0.30, 1.87, 0]
  #q_f: [1.45, 1, -1.12,  -1.35, 0.3, 1.87, 0]
  ## for ring reaching
  #q_0: [ -0.0659,   -1.5704,   -0.2260,   -2.777,    0.1627,    1.9139,   -0.0431 ]
  #q_0: [ 0.0255,    0.6303,         0,   -1.0719,    0.0255,    3,         0 ]
  #q_0: [ 01.0255,    -1.6303,         0,   -3.0719,    0.0255,    1.3,         0.5 ]
  #q_f: [ 0.0255,    0.6303,         0,   -1.0719,    0.0255,    2.8675,         0 ]

  # for paper left-right
  q_0: [-1.57,  0.40000,  0.0000, -1.2708,  0.0000,  1.8675,  0.0000]
  q_f: [ 1.57,  0.40000,  0.0000, -1.2708,  0.0000,  1.8675,  0.0000]

zmq:
  # ZMQ params
  state_port: 1336
  policy_port: 1338
  obstacle_port: 1339

planner:
  # sampling params
  n_trajectories: 50
  horizon: 10
  dt: 0.5
  collision_threshold: 0.01

  # navigation kernel params
  kernel_width: 1
  kernel_p: 2
  alpha_sampling_sigma: 3
  policy_update_rate: 0.5
  kernel_update_threshold: 0.1  #kernels with mean activation below this value are not updated
  update_kernel_bases: False # change tangential basis (may be useful for moving obstacles)

  # navigation kernel adding params
  kernel_adding_collision_thr: 0.03
  kernel_adding_dotproduct_thr: -0.9
  kernel_adding_kernels_thr: 0.3 #(rbf value, lower it is - sparser the kernels - depends on kernel_width a lot)

integrator:
  n_trajectories: 1
  horizon: 2
  dt: 0.01 #0.001 for real robot, 0.01 for sim and benchmarks

  collision_threshold: 0.03
  desired_frequency: 100

simulator:
  max_frequency: 250

obstacle_streamer:
  frequency: 120
